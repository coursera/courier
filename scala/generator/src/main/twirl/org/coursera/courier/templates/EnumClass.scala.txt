@(enum: org.coursera.courier.generator.specs.EnumDefinition, mixin: org.coursera.courier.generator.GeneratorMixin)

@import com.linkedin.data.schema.SchemaToJsonEncoder
@import com.linkedin.data.schema.JsonBuilder
@import org.coursera.courier.generator.specs._

@GeneratedFileNotice()
@if(enum.isTopLevel) {
  @enum.namespace.map { namespace => package @namespace }

  import javax.annotation.Generated
  import com.linkedin.data.DataMap
  import com.linkedin.data.schema.EnumDataSchema
  import com.linkedin.data.template.DataTemplateUtil
  import org.coursera.courier.templates.ScalaEnumTemplate
  import org.coursera.courier.templates.ScalaEnumTemplateSymbol
}

sealed abstract class @(enum.enumName)(name: String, properties: Option[DataMap])
  extends ScalaEnumTemplateSymbol(name, properties) {

  @mixin.extraClassExpressions(enum).map { expression =>
    @expression
  }
}

@ClassAnnotations(enum) object @enum.enumName extends ScalaEnumTemplate[@(enum.enumName)] {

  @enum.symbols.map { symbol =>
    @enum.symbolScalaDocs.get(symbol).map { doc => @doc }
    case object @symbol extends @(enum.enumName)("@symbol", properties("@symbol"))
  }

  /**
   * Represents an unrecognized enumeration symbol.
   *
   * May be present when data writer is using a version of enumeration with symbols not yet
   * known to the data reader.
   */
  case object $UNKNOWN extends @(enum.enumName)("$UNKNOWN", None)

  /**
   * Converts a string to an enumeration value. If the string does not match
   * any of the enumeration values, returns the \$UNKNOWN enumeration value.
   */
  override def withName(s: String): @enum.enumName = {
    symbols.find(_.toString == s).getOrElse($UNKNOWN)
  }

  val SCHEMA = DataTemplateUtil.parseSchema(@("\"\"\"" + SchemaToJsonEncoder.schemaToJson(enum.enumSchema, JsonBuilder.Pretty.COMPACT) + "\"\"\"")).asInstanceOf[EnumDataSchema]

  @mixin.extraCompanionExpressions(enum).map { expression =>
    @expression
  }
}
