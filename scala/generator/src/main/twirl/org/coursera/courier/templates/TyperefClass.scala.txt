@(typeref: org.coursera.courier.generator.specs.TyperefDefinition, mixin: org.coursera.courier.generator.GeneratorMixin)

@import com.linkedin.data.schema.SchemaToJsonEncoder
@import com.linkedin.data.schema.JsonBuilder
@import org.coursera.courier.generator.specs._

@GeneratedFileNotice()
@if(typeref.isTopLevel) {
  @typeref.namespace.map { namespace => package @namespace }

  import javax.annotation.Generated

  import com.linkedin.data.schema.TyperefDataSchema
  import com.linkedin.data.schema.DataSchema
  import com.linkedin.data.template.DataTemplateUtil
  import com.linkedin.data.template.TyperefInfo
}

@ClassAnnotations(typeref) final class @(typeref.scalaType)() extends TyperefInfo(@(typeref.scalaType).SCHEMA) {
  @(typeref.scalaType) // force static initialization
  @mixin.extraClassExpressions(typeref).map { expression =>
    @expression
  }
}

object @(typeref.scalaType) {
  val SCHEMA = DataTemplateUtil.parseSchema(@("\"\"\"" + SchemaToJsonEncoder.schemaToJson(typeref.typerefSchema, JsonBuilder.Pretty.COMPACT) + "\"\"\"")).asInstanceOf[TyperefDataSchema]
  @mixin.extraCompanionExpressions(typeref).map { expression =>
    @expression
  }
}
