@(union: org.coursera.courier.generator.specs.UnionDefinition, mixin: org.coursera.courier.generator.GeneratorMixin)

@import com.linkedin.data.schema.SchemaToJsonEncoder
@import com.linkedin.data.schema.JsonBuilder
@import org.coursera.courier.generator.specs._

@GeneratedFileNotice()
@if(union.isTopLevel) {
  @union.namespace.map { namespace => package @namespace }

  import javax.annotation.Generated

  import com.linkedin.data.DataMap
  import com.linkedin.data.schema.DataSchemaConstants
  import com.linkedin.data.ByteString
  import com.linkedin.data.schema.UnionDataSchema
  import com.linkedin.data.schema.TyperefDataSchema
  import com.linkedin.data.template.Custom
  import com.linkedin.data.template.DataTemplateUtil
  import com.linkedin.data.template.UnionTemplate
  import org.coursera.courier.templates.DataTemplates.DataConversion
  import org.coursera.courier.templates.ScalaUnionTemplate
  import org.coursera.courier.coercers.SingleElementCaseClassCoercer
  import org.coursera.courier.companions.UnionCompanion
  import org.coursera.courier.companions.UnionMemberCompanion
  import org.coursera.courier.companions.UnionWithTyperefCompanion
  import scala.language.implicitConversions

  import scala.runtime.ScalaRunTime
}

@ClassAnnotations(union) sealed abstract class @(union.scalaType) protected(private val value: DataMap)
  extends ScalaUnionTemplate(value, @(union.scalaType).SCHEMA) with Product {
  @(union.scalaType) // force static initialization
  import @(union.scalaType)._

  // reset UnionTemplate overrides
  override def canEqual(that: Any): Boolean = that.isInstanceOf[this.type]

  override def equals(that: Any): Boolean = (that match {
    case that: Product if this.productArity == that.productArity =>
      this.productIterator sameElements that.productIterator
    case _ =>
      false
  })

  override def toString: String = ScalaRunTime._toString(this)

  override def hashCode: Int = ScalaRunTime._hashCode(this)

  @mixin.extraClassExpressions(union).map { expression =>
    @expression
  }
}

object @(union.scalaType) extends UnionCompanion[@(union.scalaType)] @(if(union.containingTyperef.isDefined){"with UnionWithTyperefCompanion[" + union.scalaType + "] "}){
  val SCHEMA = DataTemplateUtil.parseSchema(@("\"\"\"" + SchemaToJsonEncoder.schemaToJson(union.unionSchema, JsonBuilder.Pretty.COMPACT) + "\"\"\"")).asInstanceOf[UnionDataSchema]

  @union.containingTyperef.flatMap(_.schema).map { typerefSchema =>
    val TYPEREF_SCHEMA = DataTemplateUtil.parseSchema(@("\"\"\"" + SchemaToJsonEncoder.schemaToJson(typerefSchema, JsonBuilder.Pretty.COMPACT) + "\"\"\"")).asInstanceOf[TyperefDataSchema]
  }

  @* Register custom types and coercers. *@
  @union.customInfosToRegister.map { case (member, customInfos) =>
    @customInfos.map { customInfo =>
      @registerCustomInfo(customInfo, member.dataClass)
    }
  }

  @union.members.map { member =>
    @member.classDefinition match {
      case primitiveMember: PrimitiveDefinition => {
        protected val @(member.classDefinition.memberName)Schema = SCHEMA.getType("@(primitiveMember.pegasusType)")
      }
      case _: Any => {
        protected val @(member.classDefinition.memberName)Schema = SCHEMA.getType("@(member.unionMemberKey)")
      }
    }
  }

  def build(union: DataMap, conversion: DataConversion): @(union.scalaType) = {
    require(union.size == 1, "Malformed union DataMap, exactly one field must be present and must be a member key")

    val unionTag = union.keySet().iterator().next()
    unionTag match {
      @union.members.map { member =>
        case @(member.classDefinition.memberName).memberKey =>
          @(member.classDefinition.memberName)(union)
      }
      case _: Any =>
        @(union.scalaType).$UnknownMember(union)
    }
  }


  @* TODO(jbetz): Simplify select methods, put common code in ScalaUnionTemplate. *@
  @union.members.map { member =>
    class @(member.classDefinition.memberName)(private val dataMap: DataMap)
      extends @(union.scalaType)(dataMap) with Product1[@(member.classDefinition.scalaTypeFullname)] {
      import @(member.classDefinition.memberName)._

      def declaringTyperefSchema: Option[TyperefDataSchema] = {
        @if(union.containingTyperef.isDefined) {
          Some(@(union.scalaType).TYPEREF_SCHEMA)
        } else {
          None
        }
      }

      def _1 = value

      lazy val value = @member.classDefinition match {
        case _: RecordDefinition | _:ArrayDefinition | _: MapDefinition | _: FixedDefinition=> {
          obtainWrapped(@(member.classDefinition.memberName)Schema, classOf[@(member.classDefinition.scalaTypeFullname)], memberKey)
        }
        case primitiveMember: PrimitiveDefinition => {
          obtainDirect(@(member.classDefinition.memberName)Schema, classOf[@(member.classDefinition.scalaTypeFullname)], memberKey)
        }
        case customMember: ClassDefinition => {
          obtainDirect(@(member.classDefinition.memberName)Schema, classOf[@(customMember.scalaTypeFullname)], memberKey)
        }
        case enumMember: EnumDefinition => {
          @(enumMember.enumFullname).withName(obtainDirect(@(member.classDefinition.memberName)Schema, classOf[String], memberKey))
        }
        case _: UnionDefinition => { @* Per Avro, unions are not allowed inside other unions. *@ }
      }

      private def setFields(value: @(member.classDefinition.scalaTypeFullname)): Unit = {
        @member.classDefinition match {
          case _: RecordDefinition | _:ArrayDefinition | _: MapDefinition | _: FixedDefinition => {
            selectWrapped(@(member.classDefinition.memberName)Schema, classOf[@(member.classDefinition.scalaTypeFullname)], memberKey, value)
          }
          case primitiveMember: PrimitiveDefinition => {
            selectDirect(@(member.classDefinition.memberName)Schema, classOf[@(primitiveMember.dataType)], memberKey, @primitiveMember.maybeBox{value})
          }
          case customMember: ClassDefinition => {
            selectDirect(@(member.classDefinition.memberName)Schema, classOf[@(customMember.scalaTypeFullname)], classOf[@(member.dataClass.rawDataType)], memberKey, value)
          }
          case enumMember: EnumDefinition => {
            selectDirect(@(member.classDefinition.memberName)Schema, classOf[String], memberKey, value.toString)
          }
          case _: UnionDefinition => { @* Per Avro, unions are not allowed inside other unions. *@ }
        }
      }
    }

    object @(member.classDefinition.memberName) extends UnionMemberCompanion[@(union.scalaType)] {
      def apply(value: @(member.classDefinition.scalaTypeFullname)): @(member.classDefinition.memberName) = {
        val $dataMap = new DataMap
        val $result = new @(member.classDefinition.memberName)($dataMap)
        $result.setFields(value)
        $dataMap.makeReadOnly()
        $result
      }

      def apply(dataMap: DataMap): @(member.classDefinition.memberName) = {
        dataMap.makeReadOnly()
        new @(member.classDefinition.memberName)(dataMap)
      }

      def unapply(member: @(member.classDefinition.memberName)): Option[@(member.classDefinition.scalaTypeFullname)] = {
        Some(member.value)
      }

      val memberKey = "@(member.unionMemberKey)"

      def unionCompanion = @(union.scalaType)
    }

    implicit def wrap(value: @(member.classDefinition.scalaTypeFullname)): @(member.classDefinition.memberName) = {
      @(member.classDefinition.memberName)(value)
    }
  }

  case class $UnknownMember private[@(union.scalaType)](private[@(union.scalaType)] val dataMap: DataMap)
    extends @(union.scalaType)(dataMap) {

    def declaringTyperefSchema: Option[TyperefDataSchema] = {
      @if(union.containingTyperef.isDefined) {
        Some(@(union.scalaType).TYPEREF_SCHEMA)
      } else {
        None
      }
    }
  }

  @mixin.extraCompanionExpressions(union).map { expression =>
    @expression
  }
}
