@args com.linkedin.pegasus.generator.spec.RecordTemplateSpec record, org.coursera.courier.android.JavaSyntax syntax, boolean mutable
@import com.linkedin.pegasus.generator.spec.ClassTemplateSpec
@import com.linkedin.pegasus.generator.spec.RecordTemplateSpec.Field
@import com.linkedin.pegasus.generator.spec.PrimitiveTemplateSpec
@import com.linkedin.pegasus.generator.spec.MapTemplateSpec
@import com.linkedin.pegasus.generator.spec.UnionTemplateSpec
@import com.linkedin.pegasus.generator.spec.ArrayTemplateSpec
@import org.coursera.courier.android.JavaSyntax
@import org.coursera.courier.api.ClassTemplateSpecs
@import org.coursera.courier.android.TypedDefinitions
@import com.linkedin.data.schema.DataSchema.Type
@import org.coursera.courier.android.AndroidProperties.PrimitiveStyle

@maybePackageAndImports(record)

@{ String className = syntax.escapeKeyword(record.getClassName()) }

@classAnnotations(record.getSchema())
public final class @className {
  @if(!mutable) {
    @if(record.getFields().size() > 0) {
      @(className)() {
        @for(Field field: record.getFields()) {
          @(syntax.escapeKeyword(field.getSchemaField().getName())) = null;
        }
      }
    }

    @recordConstructor(record, syntax)
  }

  @recordFields(record, syntax, mutable, false)

  @enclosedTypes(record, syntax, mutable)

  @if(!mutable) {
    @recordEqualityMethods(record, syntax)

    public static class Builder {
      @recordFields(record, syntax, true, true)

      public @className build() {
        return new @(className)(@syntax.fieldList(record.getFields()));
      }
    }
  }
}
