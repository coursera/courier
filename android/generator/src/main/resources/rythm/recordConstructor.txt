@args com.linkedin.pegasus.generator.spec.RecordTemplateSpec record, org.coursera.courier.android.JavaSyntax syntax
@import com.linkedin.pegasus.generator.spec.RecordTemplateSpec.Field
@import com.linkedin.data.schema.DataSchema.Type

@{ String className = syntax.escapeKeyword(record.getClassName()) }

public @(className)(@syntax.fieldAndTypeList(record.getFields())) {
  @for(Field field: record.getFields()) {
    @{ String fieldName = syntax.escapeKeyword(field.getSchemaField().getName()) }
    @{ boolean required = !field.getSchemaField().getOptional() }
    @{ Type fieldType = field.getSchemaField().getType().getType() }
    @* TODO(jbetz): Can we avoid the shallow copy here, at least for when the builder provides the collections? *@
    @if(required) {
      if (@fieldName == null) throw new IllegalArgumentException("Field @fieldName is required.");
    }
    @if(fieldType == Type.ARRAY) {
      this.@fieldName = @if(!required) { (@fieldName == null) ? null :} Collections.unmodifiableList(new ArrayList<>(@fieldName));
    } else if (fieldType == Type.MAP) {
      this.@fieldName = @if(!required) { (@fieldName == null) ? null :} Collections.unmodifiableMap(new HashMap<>(@fieldName));
    } else {
      this.@fieldName = @fieldName;
    }
  }
}
