@args com.linkedin.pegasus.generator.spec.UnionTemplateSpec union, java.util.Map<String, String> memberKeyToTypeName
@import com.linkedin.pegasus.generator.spec.UnionTemplateSpec.Member
@import org.coursera.courier.android.JavaSyntax

@maybePackageAndImports(union)

@{ String className = JavaSyntax.escapeKeyword(union.getClassName()) }

@if (union.getTyperefClass() != null) {
  @classAnnotations(union.getTyperefClass().getSchema())
}
@@JsonAdapter(@(className).Adapter.class)
public interface @className {
  @for(Member member: union.getMembers()) {
    @{ String unionMemberName = JavaSyntax.toUnionMemberName(member.getClassTemplateSpec()) }
    public @if (union.getEnclosingClass() != null) {static} class @unionMemberName implements @className {
      private static final String TYPE_NAME = "@memberKeyToTypeName.get(member.getClassTemplateSpec().getSchema().getUnionMemberKey())";
      public final String typeName = TYPE_NAME;

      public @JavaSyntax.toType(member.getClassTemplateSpec()) definition;

      @@Override
      public int hashCode() {
        return Objects.hash(this.getClass(), definition);
      }

      @@Override
      public boolean equals(Object obj) {
        if (!(obj instanceof @unionMemberName)) return false;
        @unionMemberName other = (@unionMemberName)obj;
        if (other == this) return true;
        return Objects.deepEquals(this.definition, other.definition);
      }
    }
  }

  public final class $UnknownMember implements @className {
    private $UnknownMember() { }
  }

  final class Adapter extends TypedDefinitionAdapterFactory<@className> {
    Adapter() {
      super(@(className).class, new TypedDefinitionAdapterFactory.Resolver<@className>() {
        @@Override
        public Class<? extends @className> resolve(String typeName) {
          switch (typeName) {
            @for(Member member: union.getMembers()) {
              @{ String unionMemberName = JavaSyntax.toUnionMemberName(member.getClassTemplateSpec()) } case @(unionMemberName).TYPE_NAME: return @(unionMemberName).class;
            }
            default: return $UnknownMember.class;
          }
        }
      });
    }
  }
}
