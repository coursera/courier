@args com.linkedin.pegasus.generator.spec.UnionTemplateSpec union, java.util.Map<String, String> memberKeyToTypeName, org.coursera.courier.android.JavaSyntax syntax, boolean mutable
@import com.linkedin.pegasus.generator.spec.RecordTemplateSpec
@import com.linkedin.pegasus.generator.spec.RecordTemplateSpec.Field
@import com.linkedin.pegasus.generator.spec.UnionTemplateSpec.Member
@import org.coursera.courier.android.JavaSyntax
@import com.linkedin.data.schema.DataSchema.Type

@maybePackageAndImports(union)

@{ String className = syntax.escapeKeyword(union.getClassName()) }

@if (union.getTyperefClass() != null) {
  @classAnnotations(union.getTyperefClass().getSchema())
}
@@JsonAdapter(@(className).Adapter.class)
public interface @className {
  @for(Member member: union.getMembers()) {
    @{ String memberKey = member.getClassTemplateSpec().getSchema().getUnionMemberKey() }
    @{ String unionMemberName = syntax.toUnionMemberName(member.getClassTemplateSpec()) }
    public @if (union.getEnclosingClass() != null) {static} class @unionMemberName implements @className {
      @{RecordTemplateSpec memberSpec = ((RecordTemplateSpec)member.getClassTemplateSpec())}
      @{List<Field> fields = memberSpec.getFields()}

      @if(!mutable) {
        @recordConstructor(memberSpec, syntax)
      }

      private static final String TYPE_NAME = "@memberKeyToTypeName.get(memberKey)";

      public final String typeName = TYPE_NAME;

      @recordFields(memberSpec, syntax, mutable, false)

      @if(!mutable) {
        @recordEqualityMethods(memberSpec, syntax)

        public static class Builder {
          @recordFields(memberSpec, syntax, true, false)

          public @unionMemberName build() {
            return new @(className)(@syntax.fieldList(memberSpec.getFields()));
          }
        }
      }
    }
  }

  public final class $UnknownMember implements @className {
    private $UnknownMember() { }
  }

  final class Adapter extends TypedDefinitionAdapterFactory<@className> {
    Adapter() {
      super(@(className).class, new TypedDefinitionAdapterFactory.Resolver<@className>() {
        @@Override
        public Class<? extends @className> resolve(String typeName) {
          switch (typeName) {
            @for(Member member: union.getMembers()) {
              @{ String unionMemberName = syntax.toUnionMemberName(member.getClassTemplateSpec()) } case @(unionMemberName).TYPE_NAME: return @(unionMemberName).class;
            }
            default: return $UnknownMember.class;
          }
        }
      });
    }
  }
}
