@(map: org.coursera.courier.generator.specs.MapDefinition)

@import com.linkedin.data.schema.SchemaToJsonEncoder
@import com.linkedin.data.schema.JsonBuilder
@import org.coursera.courier.generator.specs._

@inputCoercer(methodName: String, inputClass: Definition) = {
  def @(methodName)(any: AnyRef): @(inputClass.scalaTypeFullname) = {
    @inputClass match {
      case _: RecordDefinition | _: MapDefinition | _: UnionDefinition => {
        @(inputClass.scalaTypeFullname)(any.asInstanceOf[DataMap], DataConversion.SetReadOnly)
      }
      case _: ArrayDefinition => {
        @(inputClass.scalaTypeFullname)(any.asInstanceOf[DataList], DataConversion.SetReadOnly)
      }
      case primitiveItem: PrimitiveDefinition => {
        DataTemplateUtil.coerceOutput(any, classOf[@(primitiveItem.dataType)])
      }
      case enumItem: EnumDefinition => {
        @(enumItem.enumFullname).fromString(any.asInstanceOf[String])
      }
      case customItem: ClassDefinition => {
        DataTemplateUtil.coerceOutput(any, classOf[@(inputClass.scalaTypeFullname)])
      }
      case fixedItem: FixedDefinition => {
        @(inputClass.scalaTypeFullname)(DataTemplateUtil.coerceOutput(any, classOf[ByteString]))
      }
    }
  }
}

@outputCoercer(methodName: String, outputClass: Definition, outputDataClass: Option[Definition]) = {
  def @(methodName)(value: @(outputClass.scalaTypeFullname)): AnyRef = {
    @outputClass match {
      case _: RecordDefinition | _: MapDefinition | _: UnionDefinition => {
        value.data()
      }
      case _: ArrayDefinition => {
        value.data()
      }
      case fixedItem: FixedDefinition => {
        DataTemplateUtil.coerceInput(value.bytes(), classOf[ByteString], classOf[ByteString])
      }
      case primitiveItem: PrimitiveDefinition => {
        DataTemplateUtil.coerceInput(@primitiveItem.maybeBox{value}, classOf[@(primitiveItem.dataType)], classOf[@(primitiveItem.dataType)])
      }
      case enumItem: EnumDefinition => {
        value.toString
      }
      case customItem: ClassDefinition => {
        DataTemplateUtil.coerceInput(value, classOf[@(outputClass.scalaTypeFullname)], classOf[@(outputDataClass.get.scalaTypeFullname)])
      }
    }
  }
}

@if(map.isTopLevel) {
  @map.namespace.map { namespace => package @namespace }

  import javax.annotation.Generated

  import com.linkedin.data.ByteString
  import com.linkedin.data.DataMap
  import com.linkedin.data.DataList
  import com.linkedin.data.schema.MapDataSchema
  import com.linkedin.data.schema.DataSchema
  import com.linkedin.data.template.DataTemplate
  import com.linkedin.data.template.DataTemplateUtil
  import org.coursera.courier.templates.DataTemplates
  import org.coursera.courier.templates.DataTemplates.DataConversion
  import scala.collection.generic.CanBuildFrom
  import scala.collection.immutable
  import scala.collection.mutable
  import scala.collection.JavaConverters._
  import com.linkedin.data.template.Custom
  import org.coursera.courier.codecs.InlineStringCodec
}

@ClassAnnotations(map) final class @(map.scalaType)(private val dataMap: DataMap)
  extends immutable.Iterable[(@(map.keyClass.scalaTypeFullname), @(map.valueClass.scalaTypeFullname))]
  with Map[@(map.keyClass.scalaTypeFullname), @(map.valueClass.scalaTypeFullname)]
  with immutable.MapLike[@(map.keyClass.scalaTypeFullname), @(map.valueClass.scalaTypeFullname), immutable.Map[@(map.keyClass.scalaTypeFullname), @(map.valueClass.scalaTypeFullname)]]
  with DataTemplate[DataMap] {
  import @(map.scalaType)._

  @* TODO(jbetz): Caching the whole map when we first access it may not be performant, need to benchmark. *@
  private[this] lazy val map = dataMap.asScala.map { case (k, v) => coerceKeyInput(k) -> coerceInput(v) }.toMap

  private[this] @inputCoercer("coerceInput", map.valueClass)

  private[this] def coerceKeyInput(key: String): @(map.keyClass.scalaTypeFullname) = {
    @inputCoercer("coerceKeyDataInput", map.keyClass)

    coerceKeyDataInput(InlineStringCodec.stringToData(key, KEY_SCHEMA))
  }

  override def get(key: @(map.keyClass.scalaTypeFullname)): Option[@(map.valueClass.scalaTypeFullname)] = map.get(key)

  override def iterator: Iterator[(@(map.keyClass.scalaTypeFullname), @(map.valueClass.scalaTypeFullname))] = map.iterator

  override def +[F >: @(map.valueClass.scalaTypeFullname)](kv: (@(map.keyClass.scalaTypeFullname), F)): Map[@(map.keyClass.scalaTypeFullname), F] = {
    val (key, value) = kv
    value match {
      case v: @(map.valueClass.scalaTypeFullname) =>
        val copy = dataMap.copy()
        copy.put(coerceKeyOutput(key), coerceOutput(v))
        copy.makeReadOnly()
        new @(map.scalaType)(copy)
      case _: Any =>
        (iterator ++ Iterator.single(kv)).toMap
    }
  }

  override def -(key: @(map.keyClass.scalaTypeFullname)): @(map.scalaType) = {
    val copy = dataMap.copy()
    copy.remove(coerceKeyOutput(key))
    copy.makeReadOnly()
    new @(map.scalaType)(copy)
  }

  override def schema(): DataSchema = @(map.scalaType).SCHEMA

  override def data(): DataMap = dataMap

  override def copy(): DataTemplate[DataMap] = this
}

object @(map.scalaType) {
  val SCHEMA = DataTemplateUtil.parseSchema(@("\"\"\"" + SchemaToJsonEncoder.schemaToJson(map.mapSchema, JsonBuilder.Pretty.COMPACT) + "\"\"\"")).asInstanceOf[MapDataSchema]
  val KEY_SCHEMA = DataTemplateUtil.parseSchema(@("\"\"\"" + SchemaToJsonEncoder.schemaToJson(map.keySchema, JsonBuilder.Pretty.COMPACT) + "\"\"\""))

  @* Register custom types and coercers. *@
  @map.customInfos.map { customInfo =>
    Custom.initializeCustomClass(classOf[@(customInfo.customClass.scalaTypeFullname)])
    @customInfo.coercerClass.map { coercer =>
      @(coercer.scalaTypeFullname).registerCoercer()
    }
  }

  @* Generate any contained types as inner classes. *@
  @ContainedTypes(map)

  val empty = @(map.scalaType)()

  def apply(elems: (@(map.keyClass.scalaTypeFullname), @(map.valueClass.scalaTypeFullname))*): @(map.scalaType) = {
    @(map.scalaType)(elems.toMap)
  }

  def apply(map: Map[@(map.keyClass.scalaTypeFullname), @(map.valueClass.scalaTypeFullname)]): @(map.scalaType) = {
    new @(map.scalaType)(new DataMap(map.map { case (k, v) => coerceKeyOutput(k) -> coerceOutput(v) }.asJava))
  }

  def apply(dataMap: DataMap, conversion: DataConversion): @(map.scalaType) = {
    new @(map.scalaType)(DataTemplates.makeImmutable(dataMap, SCHEMA, conversion))
  }

  def newBuilder = new DataBuilder()

  implicit val canBuildFrom = new CanBuildFrom[@(map.scalaType), (@(map.keyClass.scalaTypeFullname), @(map.valueClass.scalaTypeFullname)), @(map.scalaType)] {
    def apply(from: @(map.scalaType)) = new DataBuilder(from)
    def apply() = newBuilder
  }

  class DataBuilder(initial: @(map.scalaType)) extends mutable.Builder[(@(map.keyClass.scalaTypeFullname), @(map.valueClass.scalaTypeFullname)), @(map.scalaType)] {
    def this() = this(new @(map.scalaType)(new DataMap()))

    val entries = new DataMap(initial.data())

    def +=(kv: (@(map.keyClass.scalaTypeFullname), @(map.valueClass.scalaTypeFullname))): this.type = {
      val (key, value) = kv
      entries.put(coerceKeyOutput(key), coerceOutput(value))
      this
    }

    def clear() = {
      entries.clear()
    }

    def result() = {
      entries.makeReadOnly()
      new @(map.scalaType)(entries)
    }
  }

  private @outputCoercer("coerceOutput", map.valueClass, map.valueDataClass)

  private def coerceKeyOutput(key: @(map.keyClass.scalaTypeFullname)): String = {
    @outputCoercer("coerceKeyDataOutput", map.keyClass, map.keyDataClass)

    InlineStringCodec.dataToString(coerceKeyDataOutput(key))
  }
}
