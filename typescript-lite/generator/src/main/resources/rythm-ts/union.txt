@args com.linkedin.pegasus.generator.spec.UnionTemplateSpec union, org.coursera.courier.tslite.TSSyntax syntax
@import org.coursera.courier.tslite.TSSyntax.EscapeOptions
@import com.linkedin.pegasus.generator.spec.UnionTemplateSpec.Member
@import org.coursera.courier.schema.TypedDefinitions

@{ String className = syntax.escapeKeyword(union.getClassName(), EscapeOptions.MANGLE) }

@if (union.getTyperefClass() != null) {
  @classAnnotations(union.getTyperefClass().getSchema())
}

@if(union.getEnclosingClass() == null) {
  @syntax.openNamespace(union)
}


  export type @className = @if (!union.getMembers().isEmpty()) @for(Member member: union.getMembers()) { @(className).@syntax.toUnionMemberName(member.getClassTemplateSpec()) @if (!member_isLast) { |} } } else { void};

  @if(!union.getMembers().isEmpty()) {
    export module @className {
      export interface @(className)Member {
        [key: string]: @for(Member member: union.getMembers()){ @syntax.toTypeString(member.getClassTemplateSpec(), true) @if(!member_isLast){ |}};
      }
      @for(Member member: union.getMembers()) {
        @{ String unionMemberInterfaceName = syntax.toUnionMemberName(member.getClassTemplateSpec()) }
        @{ String unionLookupString = syntax.toTypeString(member.getClassTemplateSpec(), true) }
        @{ String fullClassName = syntax.toTypeString(member.getClassTemplateSpec()) }
        export interface @unionMemberInterfaceName extends @(className)Member {
          "@unionLookupString": @fullClassName;
        }
      }

      export function get(union: @className) {
        return {
          @for(Member member: union.getMembers()) {
            @(syntax.filterForUnionGetterKey(syntax.toTypeString(member.getClassTemplateSpec(), false))): union["@syntax.toTypeString(member.getClassTemplateSpec(), true)"] as @syntax.toTypeString(member.getClassTemplateSpec()) @if(!member_isLast) {,}
          }
        };
      }
    }
  }
@if(union.getEnclosingClass() == null) {
  @syntax.closeNamespace(union)
}
