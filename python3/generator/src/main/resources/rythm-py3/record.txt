@args org.coursera.courier.py3.Py3Syntax.Py3RecordSyntax record
@import org.coursera.courier.py3.Py3Syntax.Py3UnionSyntax
@import org.coursera.courier.py3.Py3Syntax.Py3RecordFieldSyntax
@record.imports()

class @(record.typeName())(courier.Record):
    AVRO_SCHEMA = @record.avroSchemaJson()

    def __init__(self, data=None, @for(Py3RecordFieldSyntax field: record.fields()) {@field.accessorName()=@field.constructorDefault(), }):
        super(@record.typeName(), self).__init__(data)
        @if(!record.fields().isEmpty()){        if data is None:}
            @for(Py3RecordFieldSyntax field: record.fields()) {
            if @field.accessorName() is courier.REQUIRED:
                raise courier.ValidationError('"@field.accessorName()" is required to create a "@record.typeName()", but was not provided')
            elif @field.accessorName() not in [None, courier.OPTIONAL]:
                self.data['@field.jsonKey()'] = courier.data_value(@field.accessorName())
            }

        courier.validate(self)

    def __str__(self):
      return '@(record.typeName())(' + \
        @for(Py3RecordFieldSyntax field: record.fields()) {
          '@(field.accessorName())=' + str(self.@(field.accessorName())) + \
        }
      ')'

    def __repr__(self):
      return '@(record.typeName())(' + repr(self.data) + ')';

    def __eq__(self, other):
      return isinstance(other, @(record.typeName())) and self.data == other.data

@for(Py3RecordFieldSyntax field: record.fields()) {

    #
    # '@field.accessorName()' property
    #
    @{ String setter = field.accessorName() + ".setter" }
    @@property
    def @field.accessorName() (self):
        return self._get_data_field(
            data_key='@field.jsonKey()',
            type_constructor=@field.constructor()
        )

    @@@setter
    def @field.accessorName() (self, new_value):
        @field.docString()
        data_key = '@field.jsonKey()'
        old_data_value = courier.UNINITIALIZED
        if data_key in self.data:
            old_data_value = self.data[data_key]

        if new_value is None:
            del self.data[data_key]
        else:
            self.data[data_key] = courier.data_value(new_value)

        try:
            courier.validate(self)
        except courier.ValidationError:
            if old_data_value is not courier.UNINITIALIZED:
                self.data[data_key] = old_data_value
            raise courier.ValidationError('%s is not a valid value for @(record.typeName()).@field.accessorName()' % new_value)
}@if(record.requiresCompanionModule()) { @for(Py3UnionSyntax union: record.enclosedUnions()) {
     @union(union, 1)
  }
}
