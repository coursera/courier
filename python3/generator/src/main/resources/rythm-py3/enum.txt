@args org.coursera.courier.py3.Py3Syntax.Py3EnumSyntax enumeration
@import org.coursera.courier.py3.Py3Syntax.Py3EnumSymbolSyntax

@enumeration.imports()

class @enumeration.typeName():
    AVRO_SCHEMA = courier.parse_avro_schema(@enumeration.avroSchemaJson())
    SCHEMA = courier.parse_schema("""@enumeration.courierSchemaJson()""")

    @for(Py3EnumSymbolSyntax symbol : enumeration.symbols()) {
    @symbol.docString()
    @symbol.moduleConstValue() = courier.UNINITIALIZED
    }

    ALL = courier.UNINITIALIZED
    __BY_NAME = courier.UNINITIALIZED

    def __init__(self, name):
       self.name = name
       self.data = name

    def __str__(self):
      return self.name

    def __repr__(self):
       return '@(enumeration.typeName())("%s")' % self.name

    @@classmethod
    def __init_statics__(cls):
        if cls.ALL is courier.UNINITIALIZED:
            @for(Py3EnumSymbolSyntax symbol : enumeration.symbols()) {
            cls.@(symbol.moduleConstValue()) = cls(@symbol.stringLiteralValue());
            }
            cls.ALL = [@for(Py3EnumSymbolSyntax symbol : enumeration.symbols()) { cls.@(symbol.moduleConstValue()), }]
            cls.__BY_NAME = dict([(symbol.name, symbol) for symbol in cls.ALL])

    @@classmethod
    def find_by_name(cls, name):
        try:
            return cls.__BY_NAME[name]
        except KeyError:
            raise KeyError('"%s" is invalid value for courier enum "@enumeration.typeName()". Valid values are: %s' % (
              name,
              [value.name for value in @(enumeration.typeName()).ALL]
            ))

    @@classmethod
    def from_data(cls, data):
        return cls.find_by_name(data)

@(enumeration.typeName()).__init_statics__()
