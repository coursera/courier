@args org.coursera.courier.py3.Py3Syntax.Py3UnionSyntax union, int indentation
@import org.coursera.courier.py3.Py3Syntax.Py3UnionSyntax
@import org.coursera.courier.py3.Py3Syntax.Py3UnionMemberSyntax

@{ String singleIndent = "    " }

@macro("indent") {@for(int i = 0; i < indentation; i++) {@singleIndent}}

@union.imports()

@indent()class @(union.typeName())(courier.Union):
@indent()    AVRO_SCHEMA = courier.parse_avro_schema(@union.avroSchemaJson());
@indent()
@indent()    def __init__(self, value=courier.REQUIRED, data=None):
@indent()        super(self.__class__, self).__init__(data)
@indent()        """ Create a @union.typeName() from a dict (probably loaded from json).
@indent()
@indent()        You probably want to use the `create` method instead.
@indent()
@indent()        The dict must have one of these keys: @for(Py3UnionMemberSyntax member: union.members()) {
@indent()            - '@member.unionMemberKey()'
@indent()        }
@indent()        """
@indent()        self.data = data
@indent()        if data is None:
@indent()            if value is courier.REQUIRED:
@indent()                raise TypeError('__init__() missing required argument: value')
          @for(Py3UnionMemberSyntax member: union.members()) {

@indent()            if isinstance(value, @member.typeName()):
@indent()                self.data={ '@member.unionMemberKey()': courier.data_value(value) }
@indent()        }

@indent()            if value is courier.REQUIRED:
@indent()                # TODO(py3): better error here
@indent()                raise ValueError('Unacceptable value "%s" for schema %s' % (value, str(self.__class__.AVRO_SCHEMA)))
@indent()        courier.validate(self)
@indent()
@indent()    @@classmethod
@indent()    def from_data(cls, data):
@indent()        return cls(data=data)
@indent()
            @for(Py3UnionMemberSyntax member: union.members()) {
@indent()
@indent()    #
@indent()    # '@member.typeName()' union member
@indent()    #
@indent()    @@property
@indent()    def @(member.accessorName())(self):
@indent()        member_data = self.data.get('@member.unionMemberKey()')
@indent()        return member_data and @(member.constructor())(member_data)
@indent()
@indent()}
@indent()
@indent()    def __repr__(self):
@indent()        return '@(union.typeName())(' + repr(self.data) + ')';
@indent()
@indent()    def __eq__(self, other):
@indent()        return isinstance(other, @(union.typeName())) and self.data == other.data
@indent()
@indent()
