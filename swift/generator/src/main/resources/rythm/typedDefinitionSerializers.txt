@args com.linkedin.pegasus.generator.spec.UnionTemplateSpec union, java.util.Map<String, String> memberKeyToTypeName, org.coursera.courier.swift.SwiftSyntax syntax, org.coursera.courier.swift.SwiftyJSON swifty
@import com.linkedin.pegasus.generator.spec.UnionTemplateSpec.Member

@{ String className = syntax.escapeKeyword(union.getClassName()) }

public static func read(json: JSON) -> @className {
  switch json["typeName"].stringValue {
    @for(Member member: union.getMembers()) {
    @{ String unionMemberName = syntax.toUnionMemberName(member.getClassTemplateSpec()) }
      case "@(memberKeyToTypeName.get(member.getSchema().getUnionMemberKey()))":
        return .@(unionMemberName)(@swifty.toGetAccessor("json[\"definition\"]", member))
    }
    default:
      return .UNKNOWN$(json.dictionaryValue)
  }
}

public func write() -> JSON {
  switch self {
    @for(Member member: union.getMembers()) {
    @{ String unionMemberName = syntax.toUnionMemberName(member.getClassTemplateSpec()) }
      case .@(unionMemberName)(let member):
        return JSON(["typeName": "@(memberKeyToTypeName.get(member.getSchema().getUnionMemberKey()))", "definition": @swifty.toSetAccessor(member)]);
    }
    case .UNKNOWN$(let json):
      return JSON(json)
  }
}
