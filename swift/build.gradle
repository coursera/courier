buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:2.2.5'
  }
}

project.ext.externalDependency = [
    'rythm': 'org.rythmengine:rythm-engine:1.0.1',
    'pegasusGenerator': 'com.linkedin.pegasus:generator:2.6.0',
    'courierGeneratorApi': "org.coursera.courier:courier-generator-api:$courierVersion",
    'junit': 'junit:junit:4.12',
    'slf4jSimple': 'org.slf4j:slf4j-simple:1.7.12'
]

allprojects {

  tasks.withType(Javadoc) {
    if (JavaVersion.current().isJava8Compatible()) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'signing'
  apply plugin: 'idea'
  apply plugin: 'artifactory'

  repositories {
    mavenCentral()
    mavenLocal()
  }

  group = "org.coursera.courier"
  version = courierVersion

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
  }

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  artifacts {
    archives javadocJar, sourcesJar
  }

  signing {
    required = { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
  }

  artifactoryPublish {
    contextUrl = artifactoryUrl

    publish {
      repository {
        repoKey = artifactoryPublishRepoKey
        username = artifactoryUsername
        password = artifactoryPassword
        maven = true
      }
    }
    resolve {
      repository {
        repoKey = artifactoryResolverRepoKey
        username = artifactoryUsername
        password = artifactoryPassword
        maven = true
      }
    }
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
          name 'Courier Swift Generator'
          packaging 'jar'
          // optionally artifactId can be defined here
          description 'Swift data binding generator for multiple data formats including JSON and Avro.'
          url 'https://github.com/coursera/courier'

          scm {
            connection 'git@github.com:coursera/courier.git'
            developerConnection 'git@github.com:coursera/courier.git'
            url 'https://github.com/coursera/courier/tree/master'
          }

          licenses {
            license {
              name 'The Apache License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          developers {
            developer {
              id 'jpbetz'
              name 'Joe Betz'
              email 'jpbetz@gmail.com'
            }
          }
        }
      }
    }
  }
}
