package org.coursera.courier.sbt

import sbt._
import Keys._

trait CourierPluginCompat {
  protected val sourceFileFilter: FileFilter = ("*.pdsc" || "*.courier")

  def watchSourcesSetting(scope: Configuration) = {
    watchSources in scope := ((sourceDirectory in scope).value / "pegasus" ** sourceFileFilter).get
  }

  /**
   * Returns an indication of whether `sourceFiles` and their modify dates differ from what is
   * recorded in `cacheFile`, plus a function that can be called to write `sourceFiles` and their
   * modify dates to `cacheFile`.
   */
  protected def prepareCacheUpdate(
      cacheFile: File,
      sourceFiles: Seq[File],
      streams: std.TaskStreams[_]): (Boolean, () => Unit) = {
    val fileToModifiedMap =
      sourceFiles.map(f => f -> FileInfo.lastModified(f)).toMap

    val (_, previousFileToModifiedMap) =
      Sync.readInfo(cacheFile)(FileInfo.lastModified.format)
    //we only care about the source files here
    val relation = Seq.fill(sourceFiles.size)(file(".")).zip(sourceFiles)

    streams.log.debug(
      s"${fileToModifiedMap.size} <- current VS previous -> ${previousFileToModifiedMap.size}")
    val anyFilesChanged = !cacheFile.exists || (previousFileToModifiedMap != fileToModifiedMap)
    def updateCache() {
      Sync.writeInfo(
        cacheFile,
        Relation.empty[File, File] ++ relation.toMap,
        sourceFiles
          .map(f => f -> FileInfo.lastModified(f))
          .toMap)(FileInfo.lastModified.format)
    }
    (anyFilesChanged, updateCache)
  }

  protected def cloneArtifact(
      originalArtifact: Artifact,
      newName: String,
      newConfigurations: Iterable[Configuration]): Artifact = {
    originalArtifact.copy(name = newName, configurations = newConfigurations)
  }

  /**
   * Generates settings that place the artifact generated by `packagingTaskKey` in the specified
   * `ivyConfig`, while also suffixing the artifact name with "-" and the `ivyConfig`.
   */
  protected def restliArtifactSettings(packagingTaskKey: TaskKey[File])(
      ivyConfig: String): Seq[Def.Setting[_]] = {
    val config = Configurations.config(ivyConfig)

    Seq(
      (artifact in packagingTaskKey) := {
        val packagingArtifact = (artifact in packagingTaskKey).value
        cloneArtifact(
          packagingArtifact,
          packagingArtifact.name + "-" + ivyConfig,
          packagingArtifact.configurations ++ Seq(config))
      },
      ivyConfigurations += config
    )
  }

  protected def createCourierConfiguration = {
    new Configuration(
      name = "courier",
      description = "Courier generated data templates.",
      isPublic = true,
      extendsConfigs = List(Compile),
      transitive = true)
  }

  protected def createCourierArtifactConfiguration = {
    new Configuration(
      name = "courier",
      description = "Courier generated data templates.",
      isPublic = true,
      extendsConfigs = List(Compile),
      transitive = true)
  }
}
